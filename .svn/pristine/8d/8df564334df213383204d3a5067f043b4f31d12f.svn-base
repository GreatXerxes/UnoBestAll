/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import Interfaces.ListOfBussesInter;
import Interfaces.ListOfCustomersInter;
import Interfaces.ListOfRoutesInter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import unobest.model.Bus;
import unobest.model.Customer;
import unobest.model.Journey;
import unobest.model.Leg;
import unobest.model.Route;
import unobest.model.Stop;
import unobest.model.Time;
import unobest.model.WatchList;
import unobest.rmistuff.clientside.ClientSideServerInstance;
import unobest.rmistuff.clientside.impl.BusTrackingClientImpR;
import unobest.rmistuff.serverside.interfaces.BusServer;
import unobest.rmistuff.serverside.interfaces.CustomerFascade;

/**
 *
 * @author IzaakBacchus
 */
public class TestDataLoader extends javax.swing.JFrame {

    /**
     * Creates new form TestDataLoader
     */
    public TestDataLoader() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Route ID: ");

        jButton1.setText("Load Routes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton2.setText("Load Test Data Folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Load Users");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Load Admins");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Clear Files");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Load Busses");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jButton6.getAccessibleContext().setAccessibleName("loadBusses");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            String folderPath = jTextField2.getText();
            String routeID = jTextField1.getText();

            ListOfRoutesInter serverR = (ListOfRoutesInter) ClientSideServerInstance.getServer("127.0.0.1");

            File shelterFile = new File(folderPath + "/" + routeID + "Shelter.txt");
            if (!shelterFile.exists()) {
                JOptionPane.showMessageDialog(this, "Route not found");
                return;
            }
            ArrayList<String> shelters = readFileLines(shelterFile);
            ArrayList<String> returnShelters = readFileLines(new File(folderPath + "/" + routeID + "ReturnShelter.txt"));

            ArrayList<String[]> journeys = readJourneys(new File(folderPath + "/" + routeID + "Journeys.txt"));
            ArrayList<String[]> returnJourneys = readJourneys(new File(folderPath + "/" + routeID + "ReturnJourneys.txt"));

            HashMap<String, Route> newRoutes = new HashMap<String, Route>();
            HashMap<String, Stop> stops = new HashMap<String, Stop>();
            Leg leg = null;
            Leg nextLeg = null;

            for (int i = 0; i < journeys.get(0).length - 1; i++) {
                for (String[] line : journeys) {
                    String temp = line[i];
                    if (journeys.indexOf(line) == 0) {
                        if (!newRoutes.containsKey(temp)) {
                            //Creating the route. 
                            System.out.println(shelters.size());
                            Route r = new Route(temp, getRouteDescription(shelters.get(0), shelters.get(shelters.size() - 1)));
                            newRoutes.put(temp, r);
                            serverR.addRoute(r);
                        }
                    } else if (journeys.indexOf(line) == 1) {
                        //Creating a journey
                        int temp1 = getFirstStopIndex(journeys, i);
                        String desc = shelters.get(temp1 - 2) + " leaving at " + journeys.get(temp1)[i];
                        Journey j = new Journey(newRoutes.get(journeys.get(0)[i]), temp, desc);

                    } else {
                        if (!temp.equals("....")) {
                            int stopIndex = journeys.indexOf(line) - 2; //Index from shelter files

                            if (!stops.containsKey(shelters.get(stopIndex))) { //Creating stop and assign shelter to it
                                stops.put(shelters.get(stopIndex), new Stop(shelters.get(stopIndex), getShelterName(shelters.get(stopIndex))));
                            }

                            if (i == journeys.get(0).length - 1) //Last stop
                            {
                                nextLeg = null;
                            }
                            {
                                nextLeg = new Leg(Stop.getShelterFromFullName(shelters.get(stopIndex + 1)), new Time(temp), new Time(line[i + 1]));
                            }

                            if (leg != null) {//First time through. leg is null
                                leg.setNextLeg(nextLeg);
                            }
                            leg = nextLeg;

                            Route r = newRoutes.get(journeys.get(0)[i]); //Get route
                            Journey journey = null;
                            for (Journey j : r.getJourneys()) //Find specified journey on that route
                            {
                                int temp1 = getFirstStopIndex(journeys, i);
                                String desc = shelters.get(temp1 - 2) + " leaving at " + journeys.get(temp1)[i];
                                if (j.getDescr().equals(desc)) {//EDIT THIS ONCE DESCRIPTION IS CHANGED
                                    journey = j;
                                    break;
                                }
                            }

                            journey.addLeg(leg); //add new leg to the journey
                        }

                    }
                }
            }

            //Return Journeys
            leg = null;
            nextLeg = null;

            for (int i = 0; i < returnJourneys.get(0).length - 1; i++) {
                for (String[] line : returnJourneys) {
                    String temp = line[i];
                    if (returnJourneys.indexOf(line) == 0) {
                        if (!newRoutes.containsKey(temp)) {
                            //Creating the route. 
                            System.out.println(returnShelters.size());
                            Route r = new Route(temp, getRouteDescription(returnShelters.get(0), returnShelters.get(returnShelters.size() - 1)));
                            newRoutes.put(temp, r);
                            serverR.addRoute(r);
                        }
                    } else if (returnJourneys.indexOf(line) == 1) {
                        //Creating a journey
                        int temp1 = getFirstStopIndex(returnJourneys, i);
                        String desc = returnShelters.get(temp1 - 2) + " leaving at " + returnJourneys.get(temp1)[i];
                        Journey j = new Journey(newRoutes.get(returnJourneys.get(0)[i]), temp, desc);

                    } else {
                        if (!temp.equals("....")) {
                            int stopIndex = returnJourneys.indexOf(line) - 2; //Index from shelter files

                            if (!stops.containsKey(returnShelters.get(stopIndex))) { //Creating stop and assign shelter to it
                                stops.put(returnShelters.get(stopIndex), new Stop(returnShelters.get(stopIndex), getShelterName(returnShelters.get(stopIndex))));
                            }

                            if (i == returnJourneys.get(0).length - 1) //Last stop
                            {
                                nextLeg = null;
                            }
                            {
                                nextLeg = new Leg(Stop.getShelterFromFullName(returnShelters.get(stopIndex + 1)), new Time(temp), new Time(line[i + 1]));
                            }

                            if (leg != null) {//First time through. leg is null
                                leg.setNextLeg(nextLeg);
                            }
                            leg = nextLeg;

                            Route r = newRoutes.get(returnJourneys.get(0)[i]); //Get route
                            Journey journey = null;
                            for (Journey j : r.getJourneys()) //Find specified journey on that route
                            {
                                int temp1 = getFirstStopIndex(returnJourneys, i);
                                String desc = returnShelters.get(temp1 - 2) + " leaving at " + returnJourneys.get(temp1)[i];
                                if (j.getDescr().equals(desc)) {//EDIT THIS ONCE DESCRIPTION IS CHANGED
                                    journey = j;
                                    break;
                                }
                            }

                            journey.addLeg(leg); //add new leg to the journey
                        }

                    }
                }
            }

            System.out.println("Writing to DB");
            ListOfRoutesInter server = (ListOfRoutesInter) ClientSideServerInstance.getServer("127.0.0.1");
            for (Route r : newRoutes.values()) {
                server.addRoute(r);
            }
            System.out.println("Done");
        } catch (Exception ex) {
            Logger.getLogger(TestDataLoader.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed
    private String getRouteDescription(String firstStop, String lastStop) {
        if (firstStop.contains("(")) {
            firstStop = firstStop.substring(0, firstStop.indexOf("("));
        }
        if (lastStop.contains("(")) {
            lastStop = lastStop.substring(0, lastStop.indexOf("("));
        }
        String temp = "";
        if (firstStop.contains(",")) {
            temp += firstStop.substring(0, firstStop.indexOf(","));
        } else {
            temp += firstStop;
        }
        temp += " --> ";
        if (lastStop.contains(",")) {
            temp += lastStop.substring(0, lastStop.indexOf(","));
        } else {
            temp += lastStop;
        }
        return temp;
    }

    private String getShelterName(String stop) {
        if (stop.contains("(")) {
            int open = stop.indexOf('(') + 1;
            int close = stop.indexOf(')');

            return stop.substring(open, close);
        }
        return "" + 0;
    }

    private int getFirstStopIndex(ArrayList<String[]> list, int i) {
        for (int j = 2; j < list.size() - 1; j++) {
            if (!list.get(j)[i].equals("-")) {
                return j;
            }
        }
        return -1;
    }

    private ArrayList<String[]> readJourneys(File file) throws Exception {
        FileReader fr = new FileReader(file);
        BufferedReader reader = new BufferedReader(fr);
        String thisLine;
        int numJourneys = reader.readLine().split("\\t").length;

        fr = new FileReader(file);
        reader = new BufferedReader(fr);
        ArrayList<String[]> lines = new ArrayList<String[]>();
        while ((thisLine = reader.readLine()) != null) {
            String[] splitLine = thisLine.split("\\t");

            if (splitLine.length == numJourneys && !ignoreLine(splitLine)) {
                lines.add(splitLine);
            }

        }
        reader.close();
        fr.close();
        return lines;

    }

    private boolean ignoreLine(String[] line) {
        for (int i = 0; i < line.length; i++) {
            String line1 = line[i];
            if (line1.equals("CB")) {
                return true;
            }
        }
        return false;
    }

    private ArrayList<String> readFileLines(File file) throws Exception {
        ArrayList<String> lines = new ArrayList<String>();

        FileReader fr = new FileReader(file);
        BufferedReader reader = new BufferedReader(fr);
        String thisLine;
        while ((thisLine = reader.readLine()) != null) {
            if (!thisLine.equals("")) {
                lines.add(thisLine);
            }
        }
        reader.close();
        fr.close();
        return lines;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jTextField2.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        File file = new File(jTextField2.getText() + "/users.txt");

        try {
            BusServer server = ClientSideServerInstance.getServer("127.0.0.1");
            FileReader fr = new FileReader(file);
            BufferedReader reader = new BufferedReader(fr);
            reader.readLine();
            String line = "";
            ListOfCustomersInter serverCust = (ListOfCustomersInter) server;
            while ((line = reader.readLine()) != null) {
                if (!line.equals("")) {
                    String[] data = line.split(",");
                    Customer c = new Customer(data[0], data[1]);
                    serverCust.addCustomer(c);
                    for (int i = 2; i < data.length; i++) {

                        c.getWatchList().getFascade().addRoute(data[i]);
                    }
                }
            }
            serverCust.saveCustToFile();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error");
        }
        System.out.println("Done");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        File file = new File(jTextField2.getText() + "/admins.txt");

        try {
            BusServer server = ClientSideServerInstance.getServer("127.0.0.1");
            FileReader fr = new FileReader(file);
            BufferedReader reader = new BufferedReader(fr);
            reader.readLine();
            String line = "";
            ListOfCustomersInter serverCust = (ListOfCustomersInter) server;
            while ((line = reader.readLine()) != null) {
                if (!line.equals("")) {
                    String[] data = line.split(",");
                    Customer c = new Customer(data[0], data[1], false, true); //SuperAdmin
                    serverCust.addCustomer(c);

                }
            }
            serverCust.saveCustToFile();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error");
        }
        System.out.println("Done");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new File("routes.ser").delete();
        new File("customers.ser").delete();
        new File("busses.ser").delete();

        try {
            FileOutputStream fileOut = new FileOutputStream("routes.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(new HashMap<>());

            FileOutputStream fileOut1 = new FileOutputStream("customers.ser");
            ObjectOutputStream out1 = new ObjectOutputStream(fileOut1);
            out1.writeObject(new HashMap<>());

            FileOutputStream fileOut2 = new FileOutputStream("busses.ser");
            ObjectOutputStream out2 = new ObjectOutputStream(fileOut2);
            out2.writeObject(new TreeMap<>());

        } catch (Exception e) {
            System.out.println("Error Clearing Files");
            e.printStackTrace();
        }
        System.out.println("Removed all data");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String folderPath = jTextField2.getText();
        String routeID = jTextField1.getText();
        ArrayList<String> lines = new ArrayList<String>();
        File busFile = new File(folderPath + "/" + "busdata" + routeID + "Return.csv");
        Map<String, Bus> busses = new TreeMap<String, Bus>();

        if (!busFile.exists()) {
            JOptionPane.showMessageDialog(this, "Route not found");
        }
        {
            try {

                FileReader fr = new FileReader(busFile);
                BufferedReader reader = new BufferedReader(fr);
                String thisLine;
                while (((thisLine = reader.readLine()) != null)) {
                    lines.add(thisLine);
                }

            } catch (Exception ex) {
                Logger.getLogger(TestDataLoader.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Bus
            for (String line : lines) {
                String[] e = line.split(",");
                if (e[0].contains("UNO")) {
                    busses.put(e[0], new Bus(e[0]));
                }
            }

            //Writing to DB
            try {
                ListOfBussesInter server = (ListOfBussesInter) ClientSideServerInstance.getServer("127.0.0.1");
                for (Bus b : busses.values()) {
                    server.addBus(b);
                }
            } catch (Exception e) {
                System.out.println("Error writing busses to DB");
            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
         * @param args the command line arguments
         */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestDataLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestDataLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestDataLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestDataLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestDataLoader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
