/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unobest.model;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import unobest.rmistuff.clientside.BusTrackingClient;
import unobest.rmistuff.serverside.impl.ListOfBusses;
import unobest.rmistuff.serverside.interfaces.BusFascade;
import unobest.util.Util;

/**
 *
 * @author AkshayPopat
 */
public class BusTest {

    private static BusTest getInstance() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public BusTest() {
    }

    @BeforeClass
    public static void setUpClass() {

    }

    @AfterClass
    public static void tearDownClass() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of getBusses method, of class Bus.
     */
    @Test
    public void testGetBusses() {
        System.out.println("getBusses");
        Bus bus1 = new Bus();
        Bus bus2 = new Bus();
        boolean pass = false;
        for (Bus b : Bus.getBusses()) {
            if (b.equals(bus1) || b.equals(bus2)) {
                pass = true;
            } else {
                pass = false;
            }
        }
        assertTrue(pass);

    }

    /**
     * Test of toString method, of class Bus.
     */
    @Test
    public void testToString() {
        System.out.println("toString");
        Bus instance = new Bus();
        String reg = instance.reg;
        int capacity = 32;
        String expResult = "Bus{" + "reg=" + reg + ", capacity=" + capacity + '}';
        String result = instance.toString();
        assertEquals(expResult, result);

    }

    /**
     * Test of getBus method, of class Bus.
     */
    @Test
    public void testGetBus() {
        System.out.println("getBus");
        Bus bus = new Bus();
        Bus bus1 = new Bus();
        assertEquals(bus, Bus.getBus(bus.getReg()));
    }

    /**
     * Test of arrivedAtStop method, of class Bus.
     */
    @Test
    public void testArrivedAtStop_Leg() throws RemoteException {
        //System.out.println("testArrivedAtStop_Leg()");

        Bus b1 = new Bus();
        Journey j1 = new Journey(new Route("636", "Here to there"), "Monday", "Monday 636");

        Leg l1 = new Leg(Stop.getShelterFromFullName("LRCEntrance"), new unobest.model.Time(12, 00), new unobest.model.Time(11, 10));
        Leg l2 = new Leg(Stop.getShelterFromFullName("kak"), new unobest.model.Time(12, 00), new unobest.model.Time(11, 10));

        b1.arrivedAtStop(l1);
        BusFascade b2= Util.getFascade(b1);
        AssertEquals(b2.getStop(), l1.getStop());

        assertTrue(true);
        
    }

    /**
     * Test of arrivedAtStop method, of class Bus.
     */
    @Test
    public void testArrivedAtStop_String() {
        System.out.println("arrivedAtStop");
        String s = "Dont Know";
        Bus instance = new Bus();
        instance.arrivedAtStop(s);

<<<<<<< .mine
        
=======
        assertTrue(instance.currentJourney.active);

>>>>>>> .r59
    }
<<<<<<< .mine
    
   
=======
>>>>>>> .r59

    /**
     * Test of getReg method, of class Bus.
     */
    @Test
    public void testGetReg() {
        System.out.println("getReg");
<<<<<<< .mine
        Bus bus = new Bus();
        Bus bus1 = new Bus();
        assertEquals(bus,Bus.getBus(bus.getReg()));
=======
        Bus instance = new Bus();
        String expResult = "616";
        String result = instance.getReg();

        assertEquals(instance.reg, result);
>>>>>>> .r59

    }

    /**
     * Test of getCurrentStatus method, of class Bus.
     */
    @Test
    public void testGetCurrentStatus() {
        System.out.println("getCurrentStatus");
        Bus instance = new Bus();
        Travelling expResult = null;
        Travelling result = instance.getCurrentStatus();
        assertEquals(instance.currentJourney, result);

    }

    /**
     * Test of isWatchedBy method, of class Bus.
     */
    @Test
    public void testIsWatchedBy() {
        System.out.println("isWatchedBy");
        BusTrackingClient client = null;
        Bus instance = new Bus();
        boolean expResult = false;
        boolean result = instance.isWatchedBy(client);
        assertEquals(expResult, result);

    }

    /**
     * Test of addWatcher method, of class Bus.
     */
    @Test
    public void testAddWatcher() {
        System.out.println("addWatcher");
        BusTrackingClient client = null;
        Bus instance = new Bus();
        instance.addWatcher(client);

    }

    /**
     * Test of removeWatcher method, of class Bus.
     */
    @Test
    public void testRemoveWatcher() {
        System.out.println("removeWatcher");
        BusTrackingClient client = null;
        Bus instance = new Bus();
        instance.removeWatcher(client);

    }

    /**
     * Test of notifyWatchers method, of class Bus.
     */
    @Test
    public void testNotifyWatchers() {
        System.out.println("notifyWatchers");
        Bus instance = new Bus();
        instance.notifyWatchers();

    }

    /**
     * Test of getLeg method, of class Bus.
     */
    @Test
    public void testGetLeg() {
        System.out.println("getLeg");
        Bus instance = new Bus();
        Leg expResult = null;
        Leg result = instance.getLeg();
        assertEquals(expResult, result);

    }

    /**
     * Test of setJourney method, of class Bus.
     */
    @Test
    public void testSetJourney() {
        System.out.println("setJourney");
        Journey journey  = new Journey(new Route("111", "Luton"), "Tuesday", "Tuesday 9am");;
        Bus instance = new Bus();
        instance.setJourney(journey);
        
        assertTrue(true);
    }

    /**
     * Test of getCurrentRoute method, of class Bus.
     */
    @Test
    public void testGetCurrentRoute() {
        System.out.println("getCurrentRoute");
        Bus instance = new Bus();
        Route expResult = null;
        Route result = instance.getCurrentRoute();
        assertEquals(expResult, result);

    }

    /**
     * Test of getJourney method, of class Bus.
     */
    @Test
    public void testGetJourney() {
        System.out.println("getJourney");
        Bus instance = new Bus();
        Journey expResult = null;
        Journey result = instance.getJourney();
        assertEquals(expResult, result);

    }

    private void AssertEquals(String stop, Stop stop0) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
