/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unobest.rmistuff.clientside;

import Interfaces.ListOfCustomersInter;
import java.rmi.ConnectException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import unobest.model.Customer;
import unobest.model.Route;
import unobest.rmi.util.RMISecurityPolicyLoader;
import unobest.rmistuff.clientside.impl.BusTrackingClientImpR;
import unobest.rmistuff.serverside.impl.CustomerImpR;
import unobest.rmistuff.serverside.impl.ListOfCustomers;
import unobest.rmistuff.serverside.impl.ListOfRoutes;
import unobest.rmistuff.serverside.interfaces.BusServer;
import unobest.rmistuff.serverside.interfaces.CustomerFascade;
import unobest.rmistuff.serverside.interfaces.RouteFascade;
import unobest.rmistuff.serverside.interfaces.WatchListFascade;
import unobest.util.EncryptionFunctions;

/**
 *
 * @author comqdhb
 */
public class ClientLogin extends javax.swing.JFrame {

    private CustomerFascade z;
    private Ticker ticker;
    private WatchListFascade wl;
    private BusTrackingClient client = null;
    private Registry registry;
    private BusServer server;
    private BusTrackingClientImpR clientR;

//    private boolean getClientInstance(String ip) {
//        if (client == null) {
//
//            try {
//                registry = LocateRegistry.getRegistry(ip);
//                //get the server stub from the registry
//                server = (BusServer) registry.lookup("UnoBest");
//                clientR = new BusTrackingClientImpR();
//                client = clientR;
//            } catch (ConnectException ex) {
//                JOptionPane.showMessageDialog(rootPane, "Server Not Found");
//                return false;
//            } catch (Exception ex) {
//                ex.printStackTrace();
//                return false;
//            }
//
//        }
//
//        return true;
//    }
    /**
     * Creates new form ClientLogin
     */
    public ClientLogin() {
        RMISecurityPolicyLoader.LoadDefaultPolicy();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginBtn = new javax.swing.JButton();
        usr = new javax.swing.JTextField();
        pwd = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ip = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        usr.setText("david");
        usr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usrActionPerformed(evt);
            }
        });

        pwd.setText("password");

        jLabel1.setText("User name");

        jLabel2.setText("password");

        jLabel3.setText("Server ip");

        ip.setText("127.0.0.1");

        jButton1.setText("Create New Account");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("OR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginBtn)
                .addGap(74, 74, 74))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(112, 112, 112)
                            .addComponent(jLabel2))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(71, 71, 71)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usr)
                    .addComponent(pwd, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(ip))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginBtn)
                    .addComponent(jButton1)
                    .addComponent(jLabel4))
                .addGap(64, 64, 64))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:

        server = ClientSideServerInstance.getServer(ip.getText());
        //This is looking at the local copy of it
        //if (ListOfCustomers.getInstance().customerExist(usr.getText()))  //Checking if a customer exists.
        try {
            final RouteManager rm = new RouteManager();
            final ClientLogin thisClass = this;
<<<<<<< .mine
            SwingWorker worker = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    //moved to a method, to reduce code duplication
                    loginBtn.disable();
                    //Encrypt the password
                    String password = pwd.getText();
                    byte[] pWordBytes = EncryptionFunctions.encipher("AES", password, EncryptionFunctions.readKey());
                    String passWord64 = EncryptionFunctions.Base64Encode(pWordBytes);
                    clientR = new BusTrackingClientImpR();
                    client = clientR;
                    z = server.getCustomer(usr.getText(), passWord64, client);
                    ListOfCustomersInter serverCust = (ListOfCustomersInter) server;
                    boolean isAdmin = serverCust.isAdmin(usr.getText());
                    boolean isSuperAdmin= serverCust.isSuperAdmin(usr.getText());
                    if (z != null && !isAdmin &&! isSuperAdmin) {
                        clientR.setServer(server);
                        ticker = new Ticker();
                        clientR.setRoutePanel(ticker);
                        wl = z.getWatchList();
                        wl.watchRoutes(client); //LOOK HERE - Does not work when working with customers from sample file?
                        wl.addRoute("614");
                        List<RouteFascade> routes = wl.getRoutes();
                        System.out.println(routes.size());
                        for (RouteFascade r : routes) {
                            ticker.addRoute(r);
                        }
                        ticker.setVisible(true);
                        ticker.setLogin(thisClass);
                        thisClass.setVisible(false);
                        rm.setRoutes(server.getAllRoutes());
                        rm.setWatchList(wl);
                        rm.setCustomer(usr.getText());
                        rm.setVisible(true);

                    } else if (z != null && isAdmin&& !isSuperAdmin) {
                        ManageGUI n = new ManageGUI();
                        n.loadRoutes();
                        n.loadBusses();
                        n.setVisible(true);
                    } else if (z != null && isSuperAdmin) {
                        SuperAdmin n = new SuperAdmin();
                        n.load();
                        n.setVisible(true);
                    }
                    else {
                        JOptionPane.showMessageDialog(rootPane, "Username or password not found");

                    }
                    return null;
=======
            //SwingWorker worker = new SwingWorker() {
>>>>>>> .r90

            // @Override
            // protected Object doInBackground() throws Exception {
            //moved to a method, to reduce code duplication
            //  loginBtn.disable();
            //Encrypt the password
            String password = pwd.getText();
            byte[] pWordBytes = EncryptionFunctions.encipher("AES", password, EncryptionFunctions.readKey());
            String passWord64 = EncryptionFunctions.Base64Encode(pWordBytes);
            clientR = new BusTrackingClientImpR();
            client = clientR;
            
               
               z=server.getCustomer(usr.getText(), passWord64, client);

            ListOfCustomersInter serverCust = (ListOfCustomersInter) server;
            boolean isAdmin = serverCust.isAdmin(usr.getText());
            boolean isSuperAdmin = serverCust.isSuperAdmin(usr.getText());
            if (z != null && !isAdmin && !isSuperAdmin) {
                
                clientR.setServer(server);
                ticker = new Ticker();
                clientR.setRoutePanel(ticker);
                wl = z.getWatchList();
                
                wl.watchRoutes(client); //LOOK HERE - Does not work when working with customers from sample file?
                List<RouteFascade> routes = wl.getRoutes();
                System.out.println(routes.size()+"tugsutgtdoghitughugthtught hhhguhr !£");
                
                for (RouteFascade r : routes) {
                    ticker.addRoute(r);
                }
                ticker.setVisible(true);
                ticker.setLogin(thisClass);
                thisClass.setVisible(false);
                rm.setRoutes(server.getAllRoutes());
                rm.setWatchList(wl);
                rm.setCustomer(usr.getText());
                rm.setRoutePanel(ticker);
                rm.setVisible(true);

            } else if (z != null && isAdmin && !isSuperAdmin) {
                ManageGUI n = new ManageGUI();
                n.loadRoutes();
                n.loadBusses();
                n.setVisible(true);
            } else if (z != null && isSuperAdmin) {
                SuperAdmin n = new SuperAdmin();
                n.load();
                n.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Username or password not found");

                   // }
                // return null;
                // }
                //@Override
                // public void done() {
                //  loginBtn.enable();
            }

            // };
            //worker.execute();
        } catch (Exception ne) {
            ne.printStackTrace();
        }


    }//GEN-LAST:event_loginBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        server = ClientSideServerInstance.getServer(ip.getText());

        try {
            //Implemented SwingWorker
            SwingWorker worker1 = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    if (server.createCustomer(usr.getText(), pwd.getText(), client) == null) {
                        //Customer already exists 
                        JOptionPane.showMessageDialog(rootPane, "Username already exists");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Account Successfully Created");
                    }
                    return null;

                }

                @Override
                public void done() {

                }
            };

            worker1.execute();

        } catch (Exception a) {
            a.printStackTrace();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void usrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usrActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPasswordField pwd;
    private javax.swing.JTextField usr;
    // End of variables declaration//GEN-END:variables
}
